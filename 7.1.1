/* Write a program to create a binary search tree of integers and perform the following operations using linked list.
1. Insert a node.
2. Delete a node. */

#include <stdio.h>
#include <stdlib.h>

// Definition of a Node
struct Node {
    int data;
    struct Node *left, *right;
};

// Helper function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}
// Function to insert a node into the BST
struct Node* insert(struct Node* root, int data) {
    if (root == NULL) {
        return createNode(data);
    }
    if (data < root->data) {
        root->left = insert(root->left, data);
    } else if (data > root->data) {
        root->right = insert(root->right, data);
    }
    return root;
}

// Helper function to find the minimum value node in a subtree
struct Node* findMin(struct Node* root) {
    while (root->left != NULL) {
        root = root->left;
    }
    return root;
}
// Function to delete a node from the BST
struct Node* deleteNode(struct Node* root, int data) {
    if (root == NULL) {
        return NULL;
    }
    if (data < root->data) {
        root->left = deleteNode(root->left, data);
    } else if (data > root->data) {
        root->right = deleteNode(root->right, data);
    } else {
        // Node found: perform deletion
        if (root->left == NULL && root->right == NULL) {
            free(root);
            return NULL;
                    } else if (root->left == NULL) {
            struct Node* temp = root->right;
            free(root);
            return temp;
        } else if (root->right == NULL) {
            struct Node* temp = root->left;
            free(root);
            return temp;
        } else {
            struct Node* temp = findMin(root->right);
            root->data = temp->data;
            root->right = deleteNode(root->right, temp->data);
        }
    }
    return root;
}

// Function to perform inorder traversal
void inorder(struct Node* root) {
    if (root != NULL) {
        inorder(root->left);
        printf("%d ", root->data);
        inorder(root->right);
    }
}
// Function to perform preorder traversal
void preorder(struct Node* root) {
    if (root != NULL) {
        printf("%d ", root->data);
        preorder(root->left);
        preorder(root->right);
    }
}

// Main driver code (as provided)
int main() {
    struct Node *root = NULL;
    int n, data;

    printf("Enter how many nodes you want to insert in BST :");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        printf("Enter the value: ");
        scanf("%d", &data);
        root = insert(root, data);
    }

    printf("Inorder traversal(Always gives ascending order): ");
    inorder(root);
    printf("\nPreorder traversal: ");
    preorder(root);

    printf("\nEnter the data to delete: ");
    scanf("%d", &data);
     printf("After deleting %d\n", data);
    root = deleteNode(root, data);
    printf("Inorder traversal: ");
    inorder(root);
    printf("\nPreorder traversal: ");
    preorder(root);

    return 0;
}
