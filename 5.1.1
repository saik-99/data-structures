/*Write a menu-driven program that implements a circular linked list for the following operations:
Create
Insert
Delete
Reverse*/

#include<stdio.h>
#include<stdlib.h>
 
// write your code here
// Define the node structure and a NODE type
typedef struct node {
   int data;
   struct node *next;
} Node;
 
typedef Node* NODE;
 
// Function to insert a node at a given position in the circular linked list
NODE insertAtPositionInCLL(NODE first, int pos, int data) {
   NODE newNode = (NODE)malloc(sizeof(Node));
   newNode->data = data;
   newNode->next = NULL;
   
   // If list is empty, only position 1 is valid
   if (first == NULL) {
       if (pos == 1) {
           newNode->next = newNode;
           return newNode;
       } else {
           printf("Position not found\n");
           free(newNode);
           return first;
       }
   }
      // Count the number of nodes in the list
   int count = 0;
   NODE temp = first;
   do {
       count++;
       temp = temp->next;
   } while (temp != first);
   
   // Valid positions are 1 to count+1
   if (pos < 1 || pos > count + 1) {
       printf("Position not found\n");
       free(newNode);
       return first;
   }
   
   // Insertion at the beginning
   if (pos == 1) {
       NODE last = first;
       while (last->next != first)
           last = last->next;
       newNode->next = first;
       last->next = newNode;
       return newNode;  // New node becomes the new first
   }
      // Insertion at any other position
   temp = first;
   for (int i = 1; i < pos - 1; i++) {
       temp = temp->next;
   }
   newNode->next = temp->next;
   temp->next = newNode;
   return first;
}
 
// Function to delete a node at a given position in the circular linked list
NODE deleteAtPositionInCLL(NODE first, int pos) {
   if (first == NULL) {
       printf("CLL is empty\n");
       return NULL;
   }
   
   // Count the number of nodes in the list
   int count = 0;
   NODE temp = first;
   do {
       count++;
       temp = temp->next;
   } while (temp != first);
   
   // Check for valid position
   if (pos < 1 || pos > count) {
       printf("Position not found\n");
       return first;
   }
      // Deletion of the first node
   if (pos == 1) {
       // Only one node in the list
       if (first->next == first) {
           printf("Deleted element: %d\n", first->data);
           free(first);
           return NULL;
       }
       NODE last = first;
       while (last->next != first)
           last = last->next;
       NODE temp = first;
       first = first->next;
       last->next = first;
       printf("Deleted element: %d\n", temp->data);
       free(temp);
       return first;
   }
   
   // Deletion at any other position
   NODE prev = first;
   for (int i = 1; i < pos - 1; i++) {
       prev = prev->next;
   }
      NODE toDelete = prev->next;
   prev->next = toDelete->next;
   printf("Deleted element: %d\n", toDelete->data);
   free(toDelete);
   return first;
}
 
// Function to traverse and display the circular linked list
void traverseListInCLL(NODE first) {
   NODE temp = first;
   do {
       printf("%d --> ", temp->data);
       temp = temp->next;
   } while (temp != first);
   printf("\n");
}
 
// Function to reverse the circular linked list
NODE reverseCLL(NODE first) {
   if (first == NULL || first->next == first)
       return first;  // Empty or single-node list remains unchanged
   
   // Break the circular link temporarily
   NODE last = first;
   while (last->next != first)
       last = last->next;
   last->next = NULL;
      // Reverse the now linear linked list
   NODE prev = NULL, curr = first, next = NULL;
   while (curr != NULL) {
       next = curr->next;
       curr->next = prev;
       prev = curr;
       curr = next;
   }
   
   // 'prev' is now the new head of the reversed list
   first = prev;
   
   // Restore the circular link
   last = first;
   while (last->next != NULL)
       last = last->next;
   last->next = first;
   
   return first;
}
void main() {
   NODE first = NULL;
   int x, pos, op;
   while (1) {
       printf("1.Insert 2.Delete 3.Display 4.Reverse 5.Exit\n");
       printf("choice: ");
       scanf("%d", &op);
       switch (op) {
           case 1:
               printf("Position: ");
               scanf("%d", &pos);
               if (pos <= 0) {
                   printf("Position not found\n");
               } else {
                   printf("Element: ");
                   scanf("%d", &x);
                   first = insertAtPositionInCLL(first, pos, x);
               }
               break;
           case 2:
               if (first == NULL) {
                   printf("CLL is empty\n");
               } else {
                   printf("Position: ");
                   scanf("%d", &pos);
                   first = deleteAtPositionInCLL(first, pos);
               }
               break;
           case 3:
                          if (first == NULL) {
                   printf("CLL is empty\n");
               } else {
                   printf("Elements in CLL are: ");
                   traverseListInCLL(first);
               }
               break;
           case 4:
               if (first == NULL) {
                   printf("CLL is empty\n");
               } else {
                   first = reverseCLL(first);
                   printf("CLL reversed\n");
               }
               break;
           case 5:
               exit(0);
       }
   }
}
